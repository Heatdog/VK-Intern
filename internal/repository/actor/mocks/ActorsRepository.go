// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	actor_model "github.com/Heater_dog/Vk_Intern/internal/models/actor"

	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// ActorsRepository is an autogenerated mock type for the ActorsRepository type
type ActorsRepository struct {
	mock.Mock
}

// AddActor provides a mock function with given fields: ctx, actor
func (_m *ActorsRepository) AddActor(ctx context.Context, actor actor_model.ActorInsert) (string, error) {
	ret := _m.Called(ctx, actor)

	if len(ret) == 0 {
		panic("no return value specified for AddActor")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, actor_model.ActorInsert) (string, error)); ok {
		return rf(ctx, actor)
	}
	if rf, ok := ret.Get(0).(func(context.Context, actor_model.ActorInsert) string); ok {
		r0 = rf(ctx, actor)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, actor_model.ActorInsert) error); ok {
		r1 = rf(ctx, actor)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteActor provides a mock function with given fields: ctx, id
func (_m *ActorsRepository) DeleteActor(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteActor")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetActor provides a mock function with given fields: ctx, id
func (_m *ActorsRepository) GetActor(ctx context.Context, id string) (actor_model.Actor, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetActor")
	}

	var r0 actor_model.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (actor_model.Actor, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) actor_model.Actor); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(actor_model.Actor)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetActors provides a mock function with given fields: ctx
func (_m *ActorsRepository) GetActors(ctx context.Context) ([]actor_model.Actor, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetActors")
	}

	var r0 []actor_model.Actor
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]actor_model.Actor, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []actor_model.Actor); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]actor_model.Actor)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBirthDate provides a mock function with given fields: ctx, id, birthDate
func (_m *ActorsRepository) UpdateBirthDate(ctx context.Context, id uuid.UUID, birthDate string) error {
	ret := _m.Called(ctx, id, birthDate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBirthDate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, id, birthDate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGender provides a mock function with given fields: ctx, id, gender
func (_m *ActorsRepository) UpdateGender(ctx context.Context, id uuid.UUID, gender string) error {
	ret := _m.Called(ctx, id, gender)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGender")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, id, gender)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateName provides a mock function with given fields: ctx, id, name
func (_m *ActorsRepository) UpdateName(ctx context.Context, id uuid.UUID, name string) error {
	ret := _m.Called(ctx, id, name)

	if len(ret) == 0 {
		panic("no return value specified for UpdateName")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) error); ok {
		r0 = rf(ctx, id, name)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewActorsRepository creates a new instance of ActorsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewActorsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ActorsRepository {
	mock := &ActorsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
