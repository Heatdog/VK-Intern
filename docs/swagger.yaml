basePath: /
definitions:
  actor_model.Actor:
    properties:
      birth_date:
        type: string
      gender:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  actor_model.ActorInsert:
    properties:
      birth_date:
        type: string
      gender:
        type: string
      name:
        type: string
    type: object
  actor_model.UpdateActor:
    properties:
      birth_date:
        type: string
      gender:
        type: string
      id:
        type: string
      name:
        type: string
    type: object
  actorfilm.ActorFilms:
    properties:
      actor:
        $ref: '#/definitions/actor_model.Actor'
      films:
        items:
          $ref: '#/definitions/film_model.Film'
        type: array
    type: object
  actorfilm.FilmActors:
    properties:
      actors:
        items:
          $ref: '#/definitions/actor_model.Actor'
        type: array
      film:
        $ref: '#/definitions/film_model.Film'
    type: object
  actorfilm.SearchStruct:
    properties:
      actors:
        items:
          $ref: '#/definitions/actorfilm.ActorFilms'
        type: array
      films:
        items:
          $ref: '#/definitions/actorfilm.FilmActors'
        type: array
    type: object
  film_model.Film:
    properties:
      description:
        type: string
      id:
        type: string
      rating:
        type: number
      release_date:
        type: string
      title:
        type: string
    type: object
  film_model.FilmInsert:
    properties:
      actors:
        items:
          $ref: '#/definitions/film_model.Id'
        type: array
      description:
        type: string
      rating:
        type: string
      release_date:
        type: string
      title:
        type: string
    type: object
  film_model.Id:
    properties:
      id:
        type: string
    type: object
  film_model.UpdateFilm:
    properties:
      actors:
        items:
          $ref: '#/definitions/film_model.Id'
        type: array
      description:
        type: string
      id:
        type: string
      rating:
        type: string
      release_date:
        type: string
      title:
        type: string
    type: object
  github.com_Heater_dog_Vk_Intern_internal_transport_actor.ActorId:
    properties:
      id:
        type: string
    type: object
  internal_transport_actor.ActorId:
    properties:
      id:
        type: string
    type: object
  transport.RespWriter:
    properties:
      message:
        type: string
    type: object
  user_model.UserLogin:
    properties:
      login:
        type: string
      password:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: API server for Фильмотека
  title: Фильмотека
paths:
  /actor/delete:
    delete:
      consumes:
      - application/json
      description: Удаление актера из системы. ID актера передается в теле запроса.
        ID предаствлен строкой UUID.
      operationId: delete-actor
      parameters:
      - description: actor id
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/internal_transport_actor.ActorId'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/transport.RespWriter'
      security:
      - ApiKeyAuth: []
      summary: DeleteActor
      tags:
      - actors
  /actor/insert:
    post:
      consumes:
      - application/json
      description: |-
        Добавление актера в систему. Проверяется коректность ввода информации, все поля обязтельны.
        Данные передаются в теле запроса. Дата задается форматом YYYY-MM-DD
      operationId: add-actor
      parameters:
      - description: actor info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/actor_model.ActorInsert'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/transport.RespWriter'
      security:
      - ApiKeyAuth: []
      summary: AddActor
      tags:
      - actors
  /actor/update:
    put:
      consumes:
      - application/json
      description: |-
        Обновление информации об акетре в системе. Можно задать как один параметр на изменение, так и все.
        Параметры передаются в теле запроса
      operationId: update-actor
      parameters:
      - description: actor fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/actor_model.UpdateActor'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/transport.RespWriter'
      security:
      - ApiKeyAuth: []
      summary: UpdateActor
      tags:
      - actors
  /actors:
    get:
      description: Получение актеров из системы. Вместе с актерами выводится список
        фильмов.
      operationId: get-actors
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/actorfilm.ActorFilms'
            type: array
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/transport.RespWriter'
      security:
      - ApiKeyAuth: []
      summary: GetActors
      tags:
      - actors
  /film/delete:
    delete:
      consumes:
      - application/json
      description: Удаление фильма в системе. Id передается в теле запроса и представлен
        UUID.
      operationId: delete-film
      parameters:
      - description: actor fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/film_model.Id'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/transport.RespWriter'
      security:
      - ApiKeyAuth: []
      summary: DeleteFilm
      tags:
      - films
  /film/insert:
    post:
      consumes:
      - application/json
      description: Добавление фильма в систему. Все параметры являются обязтельными,
        кроме списка актеров.
      operationId: add-film
      parameters:
      - description: actor fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/film_model.FilmInsert'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/transport.RespWriter'
      security:
      - ApiKeyAuth: []
      summary: InsertFilm
      tags:
      - films
  /film/update:
    put:
      consumes:
      - application/json
      description: |-
        Обновление фильма в системе. Возомжно обновлять как частично, так и полностью все поля.
        Если указать список id актеров, список актеров в фильме заменится переданным.
      operationId: update-film
      parameters:
      - description: actor fields
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/film_model.UpdateFilm'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/transport.RespWriter'
      security:
      - ApiKeyAuth: []
      summary: UpdateFilm
      tags:
      - films
  /films:
    get:
      consumes:
      - application/json
      description: |-
        Получение фильмов списка с актерами, участвующими в данном фильме.
        Сортировка задается параметрами URL: order и type.
        Если не задать эти параметры, то будет сортировка по убыванию рейтинга
      operationId: get-films
      parameters:
      - description: type of order
        in: query
        name: order
        type: string
      - description: asc or desc
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/actorfilm.FilmActors'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/transport.RespWriter'
      security:
      - ApiKeyAuth: []
      summary: GetFilms
      tags:
      - films
  /films/search:
    get:
      consumes:
      - application/json
      description: |-
        Поиск фильмов по названию и имени актеров.
        Выводиться сначала список фильмов, вместе с актерами, принимающих участие.
        Далее выводится список актеров с фильмами, в кторых они снимались.
        Запрос передается в параметре search. Список ранжируетя по более точному совпадению.
      operationId: search-films
      parameters:
      - description: search query
        in: query
        name: search
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/actorfilm.SearchStruct'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/transport.RespWriter'
      security:
      - ApiKeyAuth: []
      summary: GetFilmsSearch
      tags:
      - films
  /login:
    post:
      consumes:
      - application/json
      description: |-
        Вход в систему. При успешном входе выдаются refresh и access токены. Refresh токен храниться
        в http-only cookie
      operationId: sign-in
      parameters:
      - description: account info
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/user_model.UserLogin'
      produces:
      - application/json
      responses:
        "200":
          description: OK
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/transport.RespWriter'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/transport.RespWriter'
      summary: SignIn
      tags:
      - auth
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
