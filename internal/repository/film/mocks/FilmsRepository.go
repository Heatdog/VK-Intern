// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	film_model "github.com/Heater_dog/Vk_Intern/internal/models/film"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// FilmsRepository is an autogenerated mock type for the FilmsRepository type
type FilmsRepository struct {
	mock.Mock
}

// GetFilmsWithActor provides a mock function with given fields: ctx, userID
func (_m *FilmsRepository) GetFilmsWithActor(ctx context.Context, userID uuid.UUID) ([]film_model.Film, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetFilmsWithActor")
	}

	var r0 []film_model.Film
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]film_model.Film, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []film_model.Film); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]film_model.Film)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewFilmsRepository creates a new instance of FilmsRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewFilmsRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *FilmsRepository {
	mock := &FilmsRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
